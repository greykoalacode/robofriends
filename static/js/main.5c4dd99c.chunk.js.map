{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","ErrorBoundry","props","state","hasError","error","info","this","setState","children","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAaeA,EAZF,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,KAAOC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAE5B,OACG,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACC,4BAAKF,GACL,2BAAIC,MCcKK,EAnBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAElB,OACG,6BAEEA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OACA,kBAAC,EAAD,CACAC,IAAMD,EACNR,GAAKK,EAAOG,GAAGR,GACfF,KAAOO,EAAOG,GAAGV,KACjBC,MAAOM,EAAOG,GAAGT,aCCTW,EAbG,SAAC,GAAmC,EAAjCC,YAAkC,IAApBC,EAAmB,EAAnBA,aAClC,OACC,yBAAKX,UAAU,OACd,2BACCA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCUCI,G,kBAhBd,WAAYC,GAAQ,IAAD,8BAClB,4CAAMA,KACDC,MAAQ,CACZC,UAAU,GAHO,E,+EAMDC,EAAOC,GACxBC,KAAKC,SAAS,CAAEJ,UAAW,M,+BAG3B,OAAGG,KAAKJ,MAAMC,SACN,wDAEDG,KAAKL,MAAMO,a,GAdOC,cCgDZC,E,YAzCd,aAAc,IAAD,8BACZ,+CAaDC,eAAgB,SAACC,GAChB,EAAKL,SAAS,CAACZ,YAAciB,EAAMC,OAAOC,SAb1C,EAAKZ,MAAO,CACZb,OAAQ,GACRM,YAAY,IAJA,E,iFAQO,IAAD,OAClBoB,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAAElB,OAAQ8B,S,+BAO/B,IAAD,EACqBb,KAAKJ,MAA5Bb,EADE,EACFA,OAAQM,EADN,EACMA,YACTyB,EAAiB/B,EAAOgC,QAAO,SAAAC,GACpC,OAAOA,EAAMxC,KAAKyC,cAAcC,SAAS7B,EAAY4B,kBAGnD,OAASlC,EAAOoC,OAEnB,yBAAKxC,UAAU,MACd,6BACC,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcU,KAAKK,kBAE/B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUtB,OAAS+B,MARO,2C,GAzBXX,a,MCIEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAO,kBAAC,EAAD,MACbC,SAASC,eAAe,SDwHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.5c4dd99c.chunk.js","sourcesContent":["import React from 'react';\r\nconst Card = ({name , email, id}) => {\r\n\r\n\treturn (\r\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n    \t<img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\r\n    \t<div>\r\n    \t\t<h2>{name}</h2>\r\n    \t\t<p>{email}</p>\r\n    \t</div>\r\n    </div>\r\n\t);\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\t\r\n\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\trobots.map((user,i) =>{\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\t\tkey ={i} \r\n\t\t\t\t\t\t\tid ={robots[i].id} \r\n\t\t\t\t\t\t\tname ={robots[i].name} \r\n\t\t\t\t\t\t\temail={robots[i].email}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield , searchChange }) => {\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='search robots' \r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError :false\r\n\t\t}\r\n\t}\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState({ hasError : true})\r\n\t}\r\n\trender () {\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn <h1>Oooops .That is not good</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\nexport default ErrorBoundry;","import React,{Component} from 'react';\r\nimport CardList from '../components/CardList';\r\n// import {robots} from './robots';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll'\r\n// STATE required for searchobox to cmmunicate with cardlist\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state ={\r\n\t\trobots: [],\r\n\t\tsearchfield:''\r\n\t\t}\r\n\t\t\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(users => this.setState({ robots :users}));\r\n\t\t\r\n\t}\r\n\tonSearchChange= (event) => {\r\n\t\tthis.setState({searchfield : event.target.value})\r\n\t}\r\n\r\n\trender() {\r\n\tconst {robots, searchfield} = this.state;\r\n\tconst filteredRobots = robots.filter(robot => {\r\n\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n\t})\r\n   \r\n    return  !robots.length ? <h1>Loading</h1> :\r\n    (\r\n\t<div className=\"tc\">\r\n\t\t<div>\r\n\t\t\t<h1 className=\"f1\">RoboFriends</h1>\r\n\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t</div>\r\n\t\t<ErrorBoundry>\r\n\t\t\t<CardList robots ={filteredRobots}/>\r\n\t\t</ErrorBoundry>\r\n\t\t\r\n\t</div>\r\n\t);\r\n\t\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n\nimport 'tachyons';\n\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>\n\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}